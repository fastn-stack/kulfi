/// Simple SSH utilities for CLI commands
/// This module provides the basic functionality needed for SSH commands
/// without the complex fastn-p2p integration

use eyre::Result;
use std::path::PathBuf;
use std::str::FromStr;

/// Get MALAI_HOME directory with proper defaults
pub fn get_malai_home() -> PathBuf {
    if let Ok(malai_home) = std::env::var("MALAI_HOME") {
        PathBuf::from(malai_home)
    } else {
        get_default_malai_home()
    }
}

/// Get default MALAI_HOME directory based on platform
pub fn get_default_malai_home() -> PathBuf {
    if let Some(data_dir) = dirs::data_dir() {
        data_dir.join("malai")
    } else {
        // Fallback to current directory
        std::env::current_dir().unwrap_or_default().join(".malai")
    }
}

/// Create cluster configuration
pub async fn create_cluster(alias: Option<String>) -> Result<()> {
    println!("üèóÔ∏è  Creating SSH cluster...");
    
    let malai_home = get_malai_home();
    let ssh_dir = malai_home.join("ssh");
    
    // Ensure SSH directory exists
    std::fs::create_dir_all(&ssh_dir)?;
    
    // Generate or read existing cluster manager identity
    let identity_dir = malai_home.join("keys");
    std::fs::create_dir_all(&identity_dir)?;
    
    let identity_file = identity_dir.join("identity.key");
    let (cluster_manager_id52, cluster_manager_secret) = if identity_file.exists() {
        // Read existing identity
        let secret_key_hex = std::fs::read_to_string(&identity_file)?;
        let secret_key = kulfi_id52::SecretKey::from_str(&secret_key_hex.trim())?;
        let id52 = secret_key.id52();
        (id52, secret_key)
    } else {
        // Generate new identity
        let (id52, secret_key) = kulfi_utils::generate_secret_key()?;
        // Save to file
        std::fs::write(&identity_file, secret_key.to_string())?;
        (id52, secret_key)
    };
    
    println!("üìù Generated cluster manager identity: {}", cluster_manager_id52);
    
    // Create basic cluster config
    let cluster_config = format!(
        r#"# Malai SSH Cluster Configuration
# Generated by: malai ssh create-cluster{}
# Cluster Manager: {}

[cluster_manager]
id52 = "{}"
use_keyring = true

# Add machines to this cluster by editing this file
# Example:
# [machine.web01]
# id52 = "machine-id52-here"
# accept_ssh = true
# allow_from = "*"
"#,
        alias.as_ref().map(|a| format!(" --alias {}", a)).unwrap_or_default(),
        cluster_manager_id52,
        cluster_manager_id52
    );
    
    let config_path = ssh_dir.join("cluster-config.toml");
    std::fs::write(&config_path, cluster_config)?;
    
    println!("‚úÖ Cluster configuration created at: {}", config_path.display());
    println!("Cluster created with ID: {}", cluster_manager_id52);
    
    if let Some(alias) = alias {
        println!("Cluster alias: {}", alias);
    }
    
    Ok(())
}

/// Show cluster information
pub async fn show_cluster_info() -> Result<()> {
    println!("üìã Cluster Information:");
    
    let malai_home = get_malai_home();
    let config_path = malai_home.join("ssh").join("cluster-config.toml");
    
    if !config_path.exists() {
        println!("‚ùå No cluster configuration found at: {}", config_path.display());
        println!("üí° Create a cluster with: malai ssh create-cluster");
        return Ok(());
    }
    
    // Read config to determine role
    let config_content = std::fs::read_to_string(&config_path)?;
    println!("üìÑ Config path: {}", config_path.display());
    
    // Parse basic info (simple parsing, not full TOML)
    if let Some(manager_line) = config_content.lines().find(|l| l.starts_with("id52 = ") && !l.contains("[machine.")) {
        let cluster_id = manager_line
            .split('"')
            .nth(1)
            .unwrap_or("unknown");
        println!("üÜî Cluster ID: {}", cluster_id);
        
        // Check local identity to determine role
        let identity_file = malai_home.join("keys").join("identity.key");
        if identity_file.exists() {
            if let Ok(secret_key_hex) = std::fs::read_to_string(&identity_file) {
                if let Ok(secret_key) = kulfi_id52::SecretKey::from_str(secret_key_hex.trim()) {
                    let local_id52 = secret_key.id52();
            
                    if local_id52 == cluster_id {
                        println!("üëë Role: cluster-manager");
                    } else if config_content.contains(&local_id52) {
                        // Find machine name
                        for line in config_content.lines() {
                            if line.contains(&local_id52) {
                                if let Some(machine_section) = config_content.lines().rev().find(|l| l.starts_with("[machine.") && config_content[config_content.find(l).unwrap()..].contains(&local_id52)) {
                                    let machine_name = machine_section
                                        .trim_start_matches("[machine.")
                                        .trim_end_matches("]");
                                    
                                    let machine_section_start = config_content.find(machine_section).unwrap();
                                    let machine_config = &config_content[machine_section_start..];
                                    if machine_config.split("[").next().unwrap().contains("accept_ssh = true") {
                                        println!("üñ•Ô∏è  Role: SSH server ({})", machine_name);
                                    } else {
                                        println!("üíª Role: client-only ({})", machine_name);
                                    }
                                    break;
                                }
                            }
                        }
                    } else {
                        println!("‚ùì Role: unknown (not found in cluster config)");
                    }
                }
            }
        }
    }
    
    Ok(())
}

/// Start SSH agent with role detection
pub async fn start_ssh_agent(environment: bool, lockdown: bool, http: bool) -> Result<()> {
    let malai_home = get_malai_home();
    
    if environment {
        // Print environment variables for shell integration
        let agent_sock = malai_home.join("ssh").join("agent.sock");
        
        println!("MALAI_SSH_AGENT={}", agent_sock.display());
        
        if lockdown {
            println!("MALAI_LOCKDOWN_MODE=true");
        }
        
        if http {
            println!("HTTP_PROXY=http://127.0.0.1:8080");  // Placeholder port
        }
        
        return Ok(());
    }
    
    println!("üöÄ Starting SSH agent...");
    println!("üìÅ Using MALAI_HOME: {}", malai_home.display());
    
    // Check for existing agent (lockfile protection)
    let lockfile = malai_home.join("ssh").join("agent.lock");
    if lockfile.exists() {
        println!("üîí Agent lockfile exists, checking if agent is running...");
        
        if let Ok(pid_str) = std::fs::read_to_string(&lockfile) {
            if let Ok(pid) = pid_str.trim().parse::<u32>() {
                if is_process_running(pid) {
                    println!("‚úÖ SSH agent already running (PID: {})", pid);
                    println!("üí° Use 'malai ssh agent -e' to get environment variables");
                    return Ok(());
                } else {
                    println!("üóëÔ∏è  Removing stale lockfile (process {} not running)", pid);
                    let _ = std::fs::remove_file(&lockfile);
                }
            }
        }
    }
    
    // Create lockfile
    let agent_pid = std::process::id();
    std::fs::create_dir_all(lockfile.parent().unwrap())?;
    std::fs::write(&lockfile, agent_pid.to_string())?;
    println!("üîê Created agent lockfile (PID: {})", agent_pid);
    
    // Detect role from cluster config
    let role = detect_machine_role(&malai_home).await?;
    
    match role {
        MachineRole::ClusterManager => {
            println!("üëë Role detected: Cluster Manager");
            start_cluster_manager_services(&malai_home).await?;
        }
        MachineRole::SshServer(machine_name) => {
            println!("üñ•Ô∏è  Role detected: SSH Server ({})", machine_name);
            start_ssh_server_services(&malai_home, &machine_name).await?;
        }
        MachineRole::ClientOnly(machine_name) => {
            println!("üíª Role detected: Client Only ({})", machine_name);
            start_client_services(&malai_home, &machine_name).await?;
        }
        MachineRole::Unknown => {
            println!("‚ùì Role: Unknown - no cluster config found or identity not in config");
            println!("üí° Create a cluster with 'malai ssh create-cluster' or join an existing one");
            return Ok(());
        }
    }
    
    println!("‚úÖ SSH agent started successfully");
    println!("üí° Use 'malai ssh agent -e' to get environment variables for shell integration");
    
    // Keep agent running (in real implementation, this would be an event loop)
    println!("üîÑ Agent running... (press Ctrl+C to stop)");
    
    // Cleanup lockfile on exit
    let lockfile_cleanup = lockfile.clone();
    tokio::spawn(async move {
        tokio::signal::ctrl_c().await.ok();
        let _ = std::fs::remove_file(lockfile_cleanup);
        println!("\nüõë SSH agent stopped");
        std::process::exit(0);
    });
    
    // Simple keep-alive loop
    loop {
        tokio::time::sleep(std::time::Duration::from_secs(1)).await;
        // In real implementation, this would handle P2P connections and requests
    }
}

/// Detect machine role from cluster config and local identity
async fn detect_machine_role(malai_home: &PathBuf) -> Result<MachineRole> {
    let config_path = malai_home.join("ssh").join("cluster-config.toml");
    
    if !config_path.exists() {
        return Ok(MachineRole::Unknown);
    }
    
    let config_content = std::fs::read_to_string(&config_path)?;
    let identity_file = malai_home.join("keys").join("identity.key");
    
    if !identity_file.exists() {
        return Ok(MachineRole::Unknown);
    }
    
    let secret_key_hex = std::fs::read_to_string(&identity_file)?;
    let secret_key = kulfi_id52::SecretKey::from_str(secret_key_hex.trim())?;
    let local_id52 = secret_key.id52();
    
    // Parse cluster manager ID
    if let Some(manager_line) = config_content.lines().find(|l| l.starts_with("id52 = ") && !l.contains("[machine.")) {
        let cluster_id = manager_line
            .split('"')
            .nth(1)
            .unwrap_or("");
        
        if local_id52 == cluster_id {
            return Ok(MachineRole::ClusterManager);
        }
    }
    
    // Check if this machine is defined in config
    if config_content.contains(&local_id52) {
        // Find machine name and check accept_ssh
        for line in config_content.lines() {
            if line.starts_with("[machine.") && config_content[config_content.find(line).unwrap()..].contains(&local_id52) {
                let machine_name = line
                    .trim_start_matches("[machine.")
                    .trim_end_matches("]");
                
                // Check if this machine accepts SSH connections
                let machine_section_start = config_content.find(line).unwrap();
                let remaining_config = &config_content[machine_section_start..];
                let machine_section = remaining_config.split("[").next().unwrap();
                
                if machine_section.contains("accept_ssh = true") {
                    return Ok(MachineRole::SshServer(machine_name.to_string()));
                } else {
                    return Ok(MachineRole::ClientOnly(machine_name.to_string()));
                }
            }
        }
    }
    
    Ok(MachineRole::Unknown)
}

/// Machine roles for agent
#[derive(Debug, PartialEq)]
enum MachineRole {
    ClusterManager,
    SshServer(String),
    ClientOnly(String), 
    Unknown,
}

/// Start cluster manager specific services
async fn start_cluster_manager_services(malai_home: &PathBuf) -> Result<()> {
    println!("üîß Starting cluster manager services...");
    println!("   üìÇ Config monitoring: {}/ssh/cluster-config.toml", malai_home.display());
    println!("   üåê P2P coordination: cluster member management");
    println!("   üì§ Config distribution: syncing to all cluster machines");
    
    // TODO: Implement actual cluster manager functionality
    // - Watch config file for changes
    // - Distribute config updates to cluster members
    // - Handle member registration and coordination
    
    Ok(())
}

/// Start SSH server specific services
async fn start_ssh_server_services(malai_home: &PathBuf, machine_name: &str) -> Result<()> {
    println!("üîß Starting SSH server services for machine '{}'...", machine_name);
    println!("   üö™ SSH listener: accepting incoming connections");
    println!("   üåê P2P communication: fastn-p2p protocol handling");
    println!("   üîê Permission checking: command and service access control");
    
    // TODO: Implement actual SSH server functionality
    // - Listen for incoming SSH connections via fastn-p2p
    // - Execute authorized commands
    // - Proxy HTTP services with access control
    
    Ok(())
}

/// Start client-only services  
async fn start_client_services(malai_home: &PathBuf, machine_name: &str) -> Result<()> {
    println!("üîß Starting client services for machine '{}'...", machine_name);
    println!("   üåê P2P client: outbound connection management");
    println!("   üï∏Ô∏è  HTTP proxy: transparent service access");
    println!("   üîß Connection pooling: efficient remote access");
    
    // TODO: Implement actual client functionality
    // - HTTP proxy for transparent service access
    // - Connection pooling for SSH commands
    // - Config sync from cluster manager
    
    Ok(())
}

/// Check if a process is running (safe approach)
fn is_process_running(pid: u32) -> bool {
    // Safe approach: check if /proc/pid exists (Linux/macOS)
    #[cfg(unix)]
    {
        std::path::Path::new(&format!("/proc/{}", pid)).exists()
    }
    
    #[cfg(not(unix))]
    {
        // On Windows, assume process might be running
        // In real implementation, would use Windows APIs
        false
    }
}