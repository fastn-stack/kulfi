-- import: malai.sh/components/page as p

-- p.doc-page: Cluster Management

Complete guide to managing P2P infrastructure clusters with malai.
From initial setup to multi-cluster production deployments.

-- ds.heading-large: Cluster Management

malai organizes your infrastructure into secure P2P clusters. This guide covers:

- [Creating and Managing Clusters](/doc/cluster/#creation)
- [Adding Machines to Clusters](/doc/cluster/#machines)  
- [Multi-Cluster Deployments](/doc/cluster/#multi-cluster)
- [Security and Access Control](/doc/cluster/#security)
- [Operational Best Practices](/doc/cluster/#operations)

-- ds.heading-medium: Creating and Managing Clusters
id: creation

-- ds.heading-small: Initialize New Cluster

Create a new cluster where this machine becomes the cluster manager:

-- ds.code:
lang: bash

# Create cluster with automatic daemon update
malai cluster init company

# Start daemon to manage the cluster
malai daemon

# Verify cluster status
malai status

-- ds.markdown:

**What happens during cluster init:**
- Generates unique cluster manager identity (ID52)
- Creates cluster.toml configuration file
- Automatically updates running daemon (if present)
- Sets up directory structure at `$MALAI_HOME/clusters/company/`

-- ds.heading-small: Cluster Directory Structure

-- ds.code:
lang: bash

$MALAI_HOME/
└── clusters/
    └── company/
        ├── cluster.toml          # Cluster configuration
        └── cluster.private-key   # Cluster manager identity

-- ds.heading-medium: Adding Machines to Clusters
id: machines

-- ds.heading-small: Machine Initialization

On each machine you want to join the cluster:

-- ds.code:
lang: bash

# Join cluster using cluster manager ID52
malai machine init <cluster-manager-id52> company

# Start daemon to accept commands  
malai daemon

-- ds.markdown:

**Machine joins cluster in two steps:**
1. **Machine Init**: Creates machine identity and cluster info locally
2. **Admin Approval**: Cluster admin must add machine to cluster config

-- ds.heading-small: Adding Machine to Cluster Config

On the cluster manager machine, add the new machine:

-- ds.code:
lang: bash

# Edit cluster configuration
$EDITOR $MALAI_HOME/clusters/company/cluster.toml

# Add machine section:
[machine.web01]
id52 = "machine-id52-from-init-output"  
allow_from = "*"

# Update running daemon with new machine
malai rescan company

-- ds.heading-medium: Multi-Cluster Deployments
id: multi-cluster

A single machine can participate in multiple clusters simultaneously.

-- ds.code:
lang: bash

# Create personal cluster (as cluster manager)
malai cluster init personal

# Join work cluster (as machine)
malai machine init <work-cluster-manager-id52> work

# Join client cluster (as machine)  
malai machine init <client-cluster-manager-id52> client

# Single daemon handles all clusters
malai daemon

# Access different clusters
malai web01.personal ps aux
malai api.work systemctl status nginx  
malai db.client pg_dump mydb

-- ds.heading-medium: Security and Access Control
id: security

-- ds.heading-small: Cryptographic Identity

Every cluster has unique cryptographic identity:

-- ds.code:
lang: bash

# View cluster manager identity
cat $MALAI_HOME/clusters/company/cluster.private-key

# Share cluster manager ID52 (public) for machine joining
malai scan-roles  # Shows public ID52 for sharing

-- ds.markdown:

**Security Model:**
- **Closed Network**: Only machines in cluster config can connect
- **Cryptographic Verification**: No passwords or certificates required  
- **Identity-Based**: Each machine has unique ID52 identity
- **Access Control**: Per-machine and per-command permissions via allow_from

-- ds.heading-small: Access Control Configuration

-- ds.code:
lang: bash

# Basic machine access (all commands allowed)
[machine.web01]
id52 = "machine-id52"
allow_from = "*"

# Restricted access (only specific groups)  
[machine.prod01]
id52 = "machine-id52"
allow_from = "admins,devops"

# Command-specific permissions
[machine.web01.command.restart-nginx]
command = "sudo systemctl restart nginx"
allow_from = "admins"

-- ds.heading-medium: Operational Best Practices
id: operations

-- ds.heading-small: Configuration Management

-- ds.code:
lang: bash

# Always validate before applying changes
malai rescan --check

# Use selective rescans for single cluster changes  
malai rescan production  # Only affects production cluster

# Full rescan only when necessary
malai rescan  # Affects all clusters

-- ds.heading-small: Health Monitoring

-- ds.code:
lang: bash

# Regular health checks
malai status  # Comprehensive daemon and cluster health

# Test daemon responsiveness
malai rescan --check  # Should complete quickly

# Monitor daemon logs (if using systemd)
sudo journalctl -u malai -f

-- ds.heading-small: Backup and Recovery

-- ds.code:
lang: bash

# Backup cluster identities (CRITICAL)
tar -czf malai-backup.tar.gz $MALAI_HOME/clusters/

# Backup configuration only (for version control)
tar -czf malai-configs.tar.gz $MALAI_HOME/clusters/*/cluster.toml

-- ds.markdown:

**IMPORTANT**: Always backup cluster.private-key files. These cannot be regenerated and losing them means losing cluster manager access.

-- ds.heading-small: Disaster Recovery

-- ds.code:
lang: bash

# Restore from backup
cd / && tar -xzf malai-backup.tar.gz

# Restart daemon with restored configs
malai daemon --foreground

# Verify all clusters operational
malai status

-- ds.markdown:

**Recovery Verification:**
- All clusters show correct roles in `malai status`
- Daemon responsive with socket communication working
- Remote command execution working for all machines
- No configuration validation errors